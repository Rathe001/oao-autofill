{"version":3,"sources":["Styles.js","App.js","serviceWorker.js","index.js"],"names":["styles","@import","@global","*","margin","padding","listStyle","boxSizing","*:focus","outline","select","h2","color","fontSize","display","fontWeight","textTransform","fontFamily","input","width","button:disabled","background","li","li:nth-child(even)","header","version","btnPrimary","cursor","borderRadius","border","btnPrimary:focus","tools","cellL","flex","cellR","textAlign","fields","field","float","label","labelText","labelInput","clientId","noFields","marginTop","getInputType","withStyles","_ref","classes","_useState","useState","_useState2","Object","slicedToArray","domain","setDomain","_useState3","_useState4","setFields","_useState5","_useState6","profile","setProfile","updateFields","newProfile","chrome","tabs","query","active","windowId","windows","WINDOW_ID_CURRENT","newDomain","url","split","selectedProfile","executeScript","code","getFields","results","forEach","r","localStorage","getItem","concat","setItem","JSON","stringify","objResults","reduce","obj","item","objectSpread","defineProperty","parse","Array","from","document","querySelectorAll","map","n","i","elLabel","children","querySelector","id","classList","value","innerText","getAttribute","type","filter","f","setPageFields","keys","key","elField","checked","dispatchEvent","Event","target","setTimeout","clickNext","click","useEffect","autofill","next","react_default","a","createElement","className","disabled","length","onClick","onChange","e","inputOnChange","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["const styles = {\n  '@import': [\n    `url('https://fonts.googleapis.com/css?family=Roboto:300,400,500,700')`,\n    `url('https://fonts.googleapis.com/css?family=Barlow+Condensed:300,400,500,600,700')`,\n  ],\n  '@global': {\n    '*': {\n      margin: 0,\n      padding: 0,\n      listStyle: 'none',\n      boxSizing: 'border-box',\n    },\n    '*:focus': {\n      outline: 'none',\n    },\n    select: {\n      margin: '0 5px 0 0',\n    },\n    h2: {\n      color: '#37435c',\n      fontSize: 24,\n      display: 'inline',\n      padding: '2px 0',\n      fontWeight: 400,\n      margin: 0,\n      textTransform: 'uppercase',\n      fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    },\n    input: {\n      padding: '3px 5px',\n      width: '100%',\n    },\n    'button:disabled': {\n      background: '#666',\n    },\n    li: {\n      background: '#fff',\n    },\n    'li:nth-child(even)': {\n      background: '#f2f2f2',\n    },\n  },\n  header: {\n    fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    background: '#37435c',\n    padding: 15,\n    fontSize: 18,\n    color: '#fff',\n    margin: 0,\n  },\n  version: {\n    fontSize: 12,\n    fontWeight: 'normal',\n    color: '#999',\n    padding: '0 5px',\n  },\n  btnPrimary: {\n    cursor: 'pointer',\n    background: '#008ff5',\n    color: '#fff',\n    margin: '0 5px 0 0',\n    borderRadius: 10,\n    border: 'none',\n    fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    fontSize: 16,\n    textTransform: 'uppercase',\n    padding: '0 10px 2px 10px',\n  },\n  'btnPrimary:focus': {\n    outline: 'none',\n  },\n  tools: {\n    display: 'flex',\n    padding: 15,\n    background: '#f2f2f2',\n  },\n  cellL: {\n    flex: 1,\n  },\n  cellR: {\n    flex: 1,\n    textAlign: 'right',\n  },\n  fields: {\n    padding: 15,\n  },\n  field: {\n    margin: '0 0 5px 0',\n    padding: '5px 10px',\n    float: 'left',\n    width: '100%',\n  },\n  label: {\n    display: 'flex',\n  },\n  labelText: {\n    flex: '1',\n    padding: '0 10px 0 0',\n    textAlign: 'right',\n  },\n  labelInput: {\n    flex: '1',\n  },\n  clientId: {\n    fontSize: 9,\n    color: '#999',\n  },\n  noFields: {\n    marginTop: 15,\n  },\n};\n\nexport default styles;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from 'react-jss';\nimport styles from './Styles';\n\nfunction getInputType(field) {\n  switch (field) {\n    case 'multi-disclosures':\n    case 'boolean':\n      return 'checkbox';\n    case 'htmlElement':\n    case 'output':\n      return 'hidden';\n    default:\n      return 'text';\n  }\n}\n\nconst App = ({ classes }) => {\n  const [domain, setDomain] = useState('');\n  const [fields, setFields] = useState({});\n  const [profile, setProfile] = useState('profile1');\n\n  useEffect(updateFields, []);\n\n  function updateFields(newProfile) {\n    chrome.tabs.query({ active: true, windowId: chrome.windows.WINDOW_ID_CURRENT }, function(tabs) {\n      const newDomain = tabs[0].url.split('://')[1].split('/')[0];\n      setDomain(newDomain);\n\n      const selectedProfile = newProfile || profile;\n\n      chrome.tabs.executeScript(\n        {\n          code: '(' + getFields + ')();',\n        },\n        results => {\n          results[0].forEach(r => {\n            if (!localStorage.getItem(`${newDomain}_${selectedProfile}_field_${r.clientId}`)) {\n              localStorage.setItem(\n                `${newDomain}_${selectedProfile}_field_${r.clientId}`,\n                JSON.stringify(r)\n              );\n            }\n          });\n\n          const objResults = results[0].reduce((obj, item) => {\n            return {\n              ...obj,\n              [item.clientId]: JSON.parse(\n                localStorage.getItem(`${newDomain}_${selectedProfile}_field_${item.clientId}`)\n              ),\n            };\n          }, {});\n\n          setFields(objResults);\n        }\n      );\n    });\n  }\n\n  function getFields() {\n    const fields = Array.from(document.querySelectorAll('[class*=\"field-type--\"]')).map((n, i) => {\n      const elLabel = n.children[0].querySelector('label');\n      const elInput = n.children[0].querySelector('input, select');\n\n      return {\n        id: i,\n        classList: n.classList.value,\n        label: elLabel ? elLabel.innerText : '',\n        clientId: n.getAttribute('data-name'),\n        type: n.classList[1].split('--')[1] || '',\n        value: '',\n      };\n    });\n\n    return fields.filter(f => !!f.clientId);\n  }\n\n  function setPageFields(fields) {\n    Object.keys(fields).map(key => {\n      const elField = document.querySelector(\n        `[data-name=\"${key}\"] input, [data-name=\"${key}\"] select`\n      );\n\n      if (elField) {\n        if (fields[key].type === 'boolean' || fields[key].type === 'multi-disclosures') {\n          elField.checked = !!fields[key].value;\n          elField.dispatchEvent(new Event('blur'));\n        } else if (fields[key].type === 'auto-complete') {\n          elField.value = fields[key].value;\n          elField.dispatchEvent(\n            new Event('input', {\n              target: elField,\n            })\n          );\n\n          setTimeout(() => {}, 1500);\n        } else {\n          elField.value = fields[key].value;\n          elField.dispatchEvent(new Event('blur'));\n        }\n      }\n    });\n  }\n\n  function clickNext() {\n    document.querySelector('.btn-page-next').click();\n  }\n\n  function inputOnChange(e, field) {\n    const value = {\n      ...field,\n      value: e.target.type === 'checkbox' ? e.target.checked : e.target.value,\n    };\n\n    setFields({\n      ...fields,\n      [field.clientId]: value,\n    });\n\n    localStorage.setItem(`${domain}_${profile}_field_${field.clientId}`, JSON.stringify(value));\n  }\n\n  const profileOnChange = e => {\n    setProfile(e.target.value);\n    updateFields(e.target.value);\n  };\n\n  const autofill = fields => {\n    chrome.tabs.executeScript(\n      {\n        code: '(' + setPageFields + ')(' + JSON.stringify(fields) + ');',\n      },\n      () => {}\n    );\n  };\n\n  const next = () => {\n    chrome.tabs.executeScript(\n      {\n        code: '(' + clickNext + ')(' + JSON.stringify(fields) + ');',\n      },\n      () => {}\n    );\n  };\n\n  return (\n    <main>\n      <h1 className={classes.header}>\n        OAO 4.0 Autofill <small className={classes.version}>1.0.1 beta</small>\n      </h1>\n      <div className={classes.tools}>\n        <div className={classes.cellL}>\n          <button\n            type=\"button\"\n            className={classes.btnPrimary}\n            disabled={fields.length === 0}\n            onClick={() => {\n              autofill(fields);\n            }}\n          >\n            Autofill\n          </button>\n          <button\n            type=\"button\"\n            className={classes.btnPrimary}\n            disabled={fields.length === 0}\n            onClick={() => {\n              next();\n            }}\n          >\n            Next Page\n          </button>\n        </div>\n        <div className={classes.cellR}>\n          <select value={profile} onChange={profileOnChange}>\n            <option value=\"profile1\">Profile 1</option>\n            <option value=\"profile2\">Profile 2</option>\n            <option value=\"profile3\">Profile 3</option>\n            <option value=\"profile4\">Profile 4</option>\n            <option value=\"profile5\">Profile 5</option>\n            <option value=\"profile6\">Profile 6</option>\n            <option value=\"profile7\">Profile 7</option>\n            <option value=\"profile8\">Profile 8</option>\n            <option value=\"profile9\">Profile 9</option>\n            <option value=\"profile10\">Profile 10</option>\n          </select>\n        </div>\n      </div>\n      <div className={classes.fields}>\n        <h2>Fields</h2>\n        {Object.keys(fields).length > 0 ? (\n          <ul>\n            {Object.keys(fields)\n              .map(key => fields[key])\n              .map(field => (\n                <li key={field.id} className={classes.field}>\n                  <label className={classes.label}>\n                    <span className={classes.labelText}>\n                      {field.label}:<br />\n                      <small className={classes.clientId}>{field.clientId}</small>\n                    </span>\n                    <span className={classes.labelInput}>\n                      <input\n                        type={getInputType(field.type)}\n                        onChange={e => inputOnChange(e, field)}\n                        value={field.value}\n                        checked={field.value}\n                      />\n                    </span>\n                  </label>\n                </li>\n              ))}\n          </ul>\n        ) : (\n          <p className={classes.noFields}>\n            <strong>No fields could be found on this page.</strong>\n          </p>\n        )}\n      </div>\n      <div className={classes.tools}>\n        <div className={classes.cellL}>\n          <button\n            type=\"button\"\n            className={classes.btnPrimary}\n            disabled={fields.length === 0}\n            onClick={() => {\n              autofill(fields);\n            }}\n          >\n            Autofill\n          </button>\n          <button\n            type=\"button\"\n            className={classes.btnPrimary}\n            disabled={fields.length === 0}\n            onClick={() => {\n              next();\n            }}\n          >\n            Next Page\n          </button>\n        </div>\n      </div>\n    </main>\n  );\n};\n\nApp.propTypes = {\n  classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
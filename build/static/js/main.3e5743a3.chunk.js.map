{"version":3,"sources":["Styles.js","App.js","serviceWorker.js","index.js"],"names":["styles","@import","@global","*","margin","padding","listStyle","*:focus","outline","select","h2","_h","color","fontSize","display","Object","defineProperty","header","fontFamily","background","btnPrimary","cursor","borderRadius","border","textTransform","btnPrimary:focus","tools","cellL","flex","cellR","textAlign","fields","scanInputs","e","document","querySelector","console","log","withStyles","_ref","classes","react_default","a","createElement","className","type","onClick","defaultValue","id","map","field","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3e5743a3.chunk.js","sourcesContent":["const styles = {\n  '@import': [\n    `url('https://fonts.googleapis.com/css?family=Roboto:300,400,500,700')`,\n    `url('https://fonts.googleapis.com/css?family=Barlow+Condensed:300,400,500,600,700')`,\n  ],\n  '@global': {\n    '*': {\n      margin: 0,\n      padding: 0,\n      listStyle: 'none',\n    },\n    '*:focus': {\n      outline: 'none',\n    },\n    select: {\n      margin: '0 5px 0 0',\n    },\n    h2: {\n      color: '#37435c',\n      fontSize: 24,\n      padding: 0,\n      display: 'inline',\n      padding: '2px 0',\n      fontWeight: 400,\n      margin: 0,\n      textTransform: 'uppercase',\n      fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    },\n  },\n  header: {\n    fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    background: '#37435c',\n    padding: 15,\n    fontSize: 18,\n    color: '#fff',\n    margin: 0,\n  },\n  btnPrimary: {\n    cursor: 'pointer',\n    background: '#008ff5',\n    color: '#fff',\n    margin: '0 5px 0 0',\n    borderRadius: 10,\n    border: 'none',\n    fontFamily: `'Barlow Condensed', Arial, Helvetica, sans-serif`,\n    fontSize: 16,\n    textTransform: 'uppercase',\n    padding: '0 10px 2px 10px',\n  },\n  'btnPrimary:focus': {\n    outline: 'none',\n  },\n  tools: {\n    display: 'flex',\n    padding: 15,\n    background: '#f2f2f2',\n  },\n  cellL: {\n    flex: 1,\n  },\n  cellR: {\n    flex: 1,\n    textAlign: 'right',\n  },\n  fields: {\n    padding: 15,\n  },\n};\n\nexport default styles;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from 'react-jss';\nimport styles from './Styles';\n\nconst scanInputs = e => {\n  const fields = document.querySelector(`[class^='field-type--'']`);\n\n  console.log('HELLO WORLD!');\n  console.log(fields);\n};\n\nconst App = ({ classes }) => {\n  const fields = [\n    {\n      id: 'this_is_a_field_id1',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id2',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id3',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id4',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id5',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id6',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id7',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id8',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id9',\n      type: 'text',\n    },\n    {\n      id: 'this_is_a_field_id10',\n      type: 'text',\n    },\n  ];\n  return (\n    <main>\n      <h1 className={classes.header}>OAO 4.0 Autofill</h1>\n      <div className={classes.tools}>\n        <div className={classes.cellL}>\n          <button type=\"button\" className={classes.btnPrimary} onClick={scanInputs}>\n            Scan inputs\n          </button>\n        </div>\n        <div className={classes.cellR}>\n          <select defaultValue=\"\">\n            <option>Profile 1</option>\n          </select>\n          <button type=\"button\" className={classes.btnPrimary}>\n            Save\n          </button>\n          <button type=\"button\" className={classes.btnPrimary}>\n            Save as\n          </button>\n        </div>\n      </div>\n      <div className={classes.fields}>\n        <h2>Fields</h2>\n        <ul>\n          {fields.map(field => (\n            <li key={field.id}>\n              <label>\n                {field.id}: <input type={field.type} />\n              </label>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </main>\n  );\n};\n\nApp.propTypes = {\n  classes: PropTypes.shape({}).isRequired,\n};\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}